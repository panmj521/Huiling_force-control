
力控算法中 因为只针对了慧灵机械臂做力控，所以只对admittance_conntroller.py文件和hybrid.controller.py文件做了修改
"""
导纳控制：
  1、相对于aubo版本的代码，这一个版本只在x、y、z方向上做了修正，就简单的把两个放大系数摘了出来，把pos_scale_factor分成了机械臂的放大系数和z轴的放大系数
  2、z轴的放大系数需要的更大，机械臂的放大系数则最好不要超过600。
    再一个就是考虑到dt的影响，因为目前写的时候发现dt，慧灵那边机械臂最快的一次调用hi_position_send循环路径，是50ms也就是20hz，所以考虑dt也是0.05s，dt的增大，
    可能需要对（加速度到速度到步长）的累加施加更高一层的累计，以防止丢失步长，所以采用梯形积分
    self.state.arm_desired_twist += 0.5 * (self.state.arm_desired_acc + self.state.last_acc) * dt 去获得arm_desired_twist
    实测发现效果累计会好一点。后续如果对于这种dt较大的控制，最好是采用梯形积分去累计。

hybrid力位混合：
  1、针对z轴方向的力控制，每次的小步长force_control_value在增量式pid离散化后，微分项是有一个*dt、积分项是有一个/dt的，最好不应该忽略这两个dt，忽略dt的话，像调整
    参数就会变的很奇怪，ki需要调整到一个很小的值、kd需要调整到一个很大的值才合理。 
  2、同时可以考虑增加一个衰减积分项，良好的z轴方向力控制，当我突然撤掉z轴方向力后，期望力能够立马进行衰减，好比我z轴如果有一个向下的的5N期望力，然后持续给一个15N的恒力向上，
     当我撤掉这个恒力后，应当立马向下取运动。所以可以考虑一个积分衰减，阈值可以调整，目前是fself.state.external_wrench_tcp小于0.1后进行大幅度衰减。
  3、符合实际情境的力控环境加速度计算，应该考虑其方向上实际受到的力，所以self.state.arm_desired_acc[2]每个dt计算都应该加上传感器实际上受到的力作用。

"""